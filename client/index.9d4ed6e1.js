import{S as e,i as n,s as t,e as r,a,d as i,b as s,c as o,f as c,g as l,h as u,j as m,k as p,l as f,m as d,n as h,o as y,t as v,p as g,q as b,r as $,u as x,v as w,w as O,x as I,y as S,z as j,A,B as E,C as P,D as k}from"./client.81df6bcc.js";var N="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function q(e,n){return e(n={exports:{}},n.exports),n.exports}var R=q(function(e,n){!function(t,r){var a={};t.PubSub=a;var i=t.define;!function(e){var n={},t=-1;function r(e){var n;for(n in e)if(e.hasOwnProperty(n))return!0;return!1}function a(e,n,t){try{e(n,t)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,n,t){e(n,t)}function s(e,t,r,s){var o,c=n[t],l=s?i:a;if(n.hasOwnProperty(t))for(o in c)c.hasOwnProperty(o)&&l(c[o],e,r)}function o(e,t,a,i){var o=function(e,n,t){return function(){var r=String(e),a=r.lastIndexOf(".");for(s(e,e,n,t);-1!==a;)r=r.substr(0,a),a=r.lastIndexOf("."),s(e,r,n,t)}}(e="symbol"==typeof e?e.toString():e,t,i),c=function(e){var t=String(e),a=Boolean(n.hasOwnProperty(t)&&r(n[t])),i=t.lastIndexOf(".");for(;!a&&-1!==i;)t=t.substr(0,i),i=t.lastIndexOf("."),a=Boolean(n.hasOwnProperty(t)&&r(n[t]));return a}(e);return!!c&&(!0===a?o():setTimeout(o,0),!0)}e.publish=function(n,t){return o(n,t,!1,e.immediateExceptions)},e.publishSync=function(n,t){return o(n,t,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,n.hasOwnProperty(e)||(n[e]={});var a="uid_"+String(++t);return n[e][a]=r,a},e.subscribeOnce=function(n,t){var r=e.subscribe(n,function(){e.unsubscribe(r),t.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){n={}},e.clearSubscriptions=function(e){var t;for(t in n)n.hasOwnProperty(t)&&0===t.indexOf(e)&&delete n[t]},e.countSubscriptions=function(e){var t,r=0;for(t in n)n.hasOwnProperty(t)&&0===t.indexOf(e)&&r++;return r},e.getSubscriptions=function(e){var t,r=[];for(t in n)n.hasOwnProperty(t)&&0===t.indexOf(e)&&r.push(t);return r},e.unsubscribe=function(t){var r,a,i,s="string"==typeof t&&(n.hasOwnProperty(t)||function(e){var t;for(t in n)if(n.hasOwnProperty(t)&&0===t.indexOf(e))return!0;return!1}(t)),o=!s&&"string"==typeof t,c="function"==typeof t,l=!1;if(!s){for(r in n)if(n.hasOwnProperty(r)){if(a=n[r],o&&a[t]){delete a[t],l=t;break}if(c)for(i in a)a.hasOwnProperty(i)&&a[i]===t&&(delete a[i],l=!0)}return l}e.clearSubscriptions(t)}}(a),"function"==typeof i&&i.amd?i(function(){return a}):(void 0!==e&&e.exports&&(n=e.exports=a),n.PubSub=a,e.exports=n=a)}("object"==typeof window&&window||N)});R.PubSub;var T={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,splitUrl:e=>{const[n,t=""]=e.split("#",2);return[decodeURI(n),decodeURI(t)]}},D=function(e,n){return function t(){null==n&&(n=e.length);var r=[].slice.call(arguments);return r.length>=n?e.apply(this,r):function(){return t.apply(this,r.concat([].slice.call(arguments)))}}};const M=e=>{if(e.length>0&&"/"!==e[0])throw Error("Invalid JSON Pointer");return e.split("/").slice(1).map(F)},C=(e,n,t,r)=>{if(0===e.length)return t;if(e.length>1){const a=e.shift();return{...n,[a]:C(e,z(n,a,r),t,_(a,r))}}if(Array.isArray(n)){const r={...n};return r[e[0]]=t,r}return"object"==typeof n&&null!==n?{...n,[e[0]]:t}:z(n,e[0],r)},L=(e,n,t,r)=>{if(0!==e.length)if(1!==e.length||U(n)){const a=e.shift();L(e,z(n,a,r),t,_(a,r))}else{n[e[0]]=t}},J=(e,n,t)=>{if(0!=e.length){if(e.length>1){const r=e.shift(),a=z(n,r,t);return{...n,[r]:J(e,a,_(r,t))}}if(Array.isArray(n))return n.filter((n,t)=>t!=e[0]);if("object"==typeof n&&null!==n){const{[e[0]]:t,...r}=n;return r}return z(n,e[0],t)}},V=(e,n,t)=>{if(0!==e.length)if(e.length>1){const r=e.shift(),a=z(n,r,t);V(e,a,_(r,t))}else Array.isArray(n)?n.splice(e[0],1):"object"==typeof n&&null!==n?delete n[e[0]]:z(n,e[0],t)},_=D((e,n)=>n+"/"+B(e)),B=e=>e.toString().replace(/~/g,"~0").replace(/\//g,"~1"),F=e=>e.toString().replace(/~0/g,"~").replace(/~1/g,"/"),z=(e,n,t="")=>{if(U(e))throw Error(`Value at '${t}' is a scalar and can't be indexed`);if(!(n in e))throw Error(`Value at '${t}' does not have index '${n}'`);return e[n]},U=e=>null===e||"object"!=typeof e;var G={nil:"",append:_,get:(e,n)=>{const t=M(e),r=e=>t.reduce(([e,n],t)=>[z(e,t,n),_(t,n)],[e,""])[0];return void 0===n?r:r(n)},set:(e,n,t)=>{const r=M(e),a=D((e,n)=>C(r,e,n,""));return void 0===n?a:a(n,t)},assign:(e,n,t)=>{const r=M(e),a=D((e,n)=>L(r,e,n,""));return void 0===n?a:a(n,t)},unset:(e,n)=>{const t=M(e),r=e=>J(t,e,"");return void 0===n?r:r(n)},delete:(e,n)=>{const t=M(e),r=e=>V(t,e,"");return void 0===n?r:r(n)}};const{splitUrl:K}=T,W=Object.freeze({id:"",pointer:"",instance:void 0}),H=(e,n=W)=>Object.freeze({...n,pointer:K(e)[1]}),Z=e=>G.get(e.pointer,e.instance),X=(e,n)=>{const t=G.append(e,n.pointer);return H(`#${encodeURI(t)}`,n)},Q=D((e,n)=>Z(n).map((t,r)=>e(X(r,n),r))),Y=D((e,n,t)=>Z(t).reduce((n,r,a)=>e(n,X(a,t),a),n)),ee=D((e,n)=>Object.keys(Z(n)).every((t,r)=>e(X(t,n),r))),ne=D((e,n)=>Object.keys(Z(n)).some((t,r)=>e(X(t,n),r)));var te={cons:(e,n="")=>Object.freeze({...W,id:n,instance:e}),get:H,uri:e=>`${e.id}#${encodeURI(e.pointer)}`,value:Z,step:X,entries:e=>Object.keys(Z(e)).map(n=>[n,X(n,e)]),map:Q,reduce:Y,every:ee,some:ne},re=/; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g,ae=/^[\u000b\u0020-\u007e\u0080-\u00ff]+$/,ie=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/,se=/\\([\u000b\u0020-\u00ff])/g,oe=/([\\"])/g,ce=/^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;function le(e){var n=String(e);if(ie.test(n))return n;if(n.length>0&&!ae.test(n))throw new TypeError("invalid parameter value");return'"'+n.replace(oe,"\\$1")+'"'}function ue(e){this.parameters=Object.create(null),this.type=e}var me={format:function(e){if(!e||"object"!=typeof e)throw new TypeError("argument obj is required");var n=e.parameters,t=e.type;if(!t||!ce.test(t))throw new TypeError("invalid type");var r=t;if(n&&"object"==typeof n)for(var a,i=Object.keys(n).sort(),s=0;s<i.length;s++){if(a=i[s],!ie.test(a))throw new TypeError("invalid parameter name");r+="; "+a+"="+le(n[a])}return r},parse:function(e){if(!e)throw new TypeError("argument string is required");var n="object"==typeof e?function(e){var n;"function"==typeof e.getHeader?n=e.getHeader("content-type"):"object"==typeof e.headers&&(n=e.headers&&e.headers["content-type"]);if("string"!=typeof n)throw new TypeError("content-type header is missing from object");return n}(e):e;if("string"!=typeof n)throw new TypeError("argument string is required to be a string");var t=n.indexOf(";"),r=-1!==t?n.substr(0,t).trim():n.trim();if(!ce.test(r))throw new TypeError("invalid media type");var a=new ue(r.toLowerCase());if(-1!==t){var i,s,o;for(re.lastIndex=t;s=re.exec(n);){if(s.index!==t)throw new TypeError("invalid parameter format");t+=s[0].length,i=s[1].toLowerCase(),'"'===(o=s[2])[0]&&(o=o.substr(1,o.length-2).replace(se,"$1")),a.parameters[i]=o}if(t!==n.length)throw new TypeError("invalid parameter format")}return a}},pe=function(e,n){if(e=e.trim(),(n=n.trim()).startsWith("about:"))return n;if(""===e)return ye(n)?fe(n):n;const t=function(e){const n={host:"",path:"",query:"",protocol:""};let t=e,r=e.indexOf("//");if(-1===r)throw new Error("Error, protocol is not specified");n.protocol=t.substring(0,r),r+=2;const a=e.indexOf("/",r),i=e.indexOf("?"),s=e.indexOf("#");-1!==s&&(t=t.substring(0,s));if(-1!==i){const e=t.substring(i);n.query=e,t=t.substring(0,i)}if(-1!==a){const e=t.substring(0,a);n.host=e,t=t.substring(a),n.path=t}else n.host=t;return n}(e);if(""===n){const{host:e,path:n,query:r}=t;return n||r?e+n+r:fe(e)}const r=function(e){const n={href:e,hash:"",query:"",netPath:!1,absolutePath:!1,relativePath:!1};if(he.test(e))return n.netPath=!0,n;"/"===e[0]?n.absolutePath=!0:n.relativePath=!0;let t=e;const r=e.indexOf("?"),a=e.indexOf("#");if(-1!==a){const e=t.substring(a);n.hash=e,t=t.substring(0,a)}if(-1!==r){const e=t.substring(r);n.query=e,t=t.substring(0,r)}return n.path=t,n}(n);if(r.netPath)return r.href.startsWith("//")&&(r.href=t.protocol+r.href),ye(r.href)?fe(r.href):r.href;if(r.absolutePath){const{path:e,query:n,hash:a}=r;return t.host+de(e)+n+a}if(r.relativePath){const{path:e,query:n,hash:a}=r;let i,s=t.path,o=t.host;return 0===e.length?i=s:(s=s.substring(0,s.lastIndexOf("/")),i=de(s+"/"+e)),o+=""!==i||n||a?i+n+a:"/"}};function fe(e){return e+("/"===e[e.length-1]?"":"/")}function de(e){let n=e.split("/");""===n[0]&&(n=n.slice(1));let t=[];return n.forEach((e,r)=>{"."!==e&&(".."===e?t.pop():""===e&&r!==n.length-1||t.push(e))}),"/"+t.join("/")}const he=new RegExp("^([a-z][a-z0-9+.-]*:)?//","i");function ye(e){const n=e.indexOf("//")+2,t=!e.includes("/",n),r=!e.includes("?",n),a=!e.includes("#",n);return t&&r&&a}var ve=fetch;const{isObject:ge,splitUrl:be}=T,$e=Symbol("$__jref"),xe={},we={},Oe=(e,n)=>{const t=e in we?we[e]:e;if(t in xe)return xe[t][n]},Ie={},Se=(e,n="",t="")=>{const r=be(e.$schema||t)[0];if(!r)throw Error("Couldn't determine schema version");delete e.$schema;const a=Oe(r,"idToken"),i=be(n||e[a]||"")[0];if(!i)throw Error("Couldn't determine an identifier for the schema");const s=!!e.$recursiveAnchor;let o;delete e.$recursiveAnchor,Oe(r,"vocabulary")&&ge(e)&&"$vocabulary"in e?(we[i]=r,o=e.$vocabulary,delete e.$vocabulary):o=i===r?{[r]:!0}:{};const c={};Ie[i]={schemaVersion:r,schema:je(e,i,r,G.nil,c),anchors:c,recursiveAnchor:s,vocabulary:o,validated:!1}},je=(e,n,t,r,a)=>{if(ge(e)){const i=Oe(t,"idToken"),s=Oe(t,"anchorToken");if("string"==typeof e[i]){const r=e[i],a=Pe(n,r),[o,c]=be(a);if(delete e[i],c&&(e[s]=s!==i?encodeURI(c):`#${encodeURI(c)}`),o!==n)return Se(e,Pe(n,o),t),{[$e]:r}}if("string"==typeof e[s]){const n=s!==i?e[s]:e[s].slice(1);a[n]=r,delete e[s]}return Object.entries(e).reduce((e,[i,s])=>(e[i]=je(s,n,t,G.append(i,r),a),e),{})}return Array.isArray(e)?e.map((e,i)=>je(e,n,t,G.append(i,r),a)):e},Ae=Object.freeze({id:"http://",schemaVersion:void 0,pointer:"",schema:void 0,recursiveAnchor:!1}),Ee=async(e,n=Ae,t=!1)=>{const r=t&&n.recursiveAnchor?n.recursiveAnchor:qe(n),a=Pe(r,e),[i,s]=be(a);if(!(i in Ie)){const e=await ve(i,{headers:{Accept:"application/schema+json"}});if(e.status>=400)throw Error(`Failed to retrieve schema with id: ${i}`);if(e.headers.has("content-type")){const n=me.parse(e.headers.get("content-type")).type;if("application/schema+json"!==n)throw Error(`${i} is not a schema. Found a document with media type: ${n}`)}Se(await e.json(),i)}const o=Object.freeze({id:i,schemaVersion:Ie[i].schemaVersion,vocabulary:Ie[i].vocabulary,pointer:s&&"/"!==s[0]?Ne(i,s):s,schema:Ie[i].schema,recursiveAnchor:n.recursiveAnchor||!!Ie[i].recursiveAnchor&&i,validated:Ie[i].validated}),c=Re(o);return ge(c)&&$e in c?Ee(c[$e],o):Oe(o.schemaVersion,"jsonReference")&&ge(c)&&"string"==typeof c.$ref?Ee(c.$ref,o):Oe(o.schemaVersion,"keywordReference")&&"string"==typeof c&&o.pointer.endsWith("/$ref")?Ee(c,o):Oe(o.schemaVersion,"keywordRecursiveReference")&&"string"==typeof c&&o.pointer.endsWith("/$recursiveRef")?Ee(c,o,!0):o},Pe=(e,n)=>{const t=pe(e,n);if("file"===ke(t)&&"file"!==ke(e))throw Error("Can't access file resource from network context");return t},ke=e=>{const n=e.match(/(.+):\/\//)[1];return n?n[1]:""},Ne=(e,n)=>{if(!(n in Ie[e].anchors))throw Error(`No such anchor '${encodeURI(e)}#${encodeURI(n)}'`);return Ie[e].anchors[n]},qe=e=>`${e.id}#${encodeURI(e.pointer)}`,Re=e=>G.get(e.pointer,e.schema),Te=(e,n)=>{const t=G.append(e,n.pointer);return Ee(`#${encodeURI(t)}`,n)},De=D((e,n)=>Re(n).map(async(t,r)=>e(await Te(r,n),r)));var Me={setConfig:(e,n,t)=>{xe[e]||(xe[e]={}),xe[e][n]=t},getConfig:Oe,add:Se,get:Ee,markValidated:e=>{Ie[e].validated=!0},uri:qe,value:Re,step:Te,sibling:(e,n)=>{const t=n.pointer.split("/");t.pop();const r=G.append(e,t.join("/"));return Ee(`#${encodeURI(r)}`,n)},entries:e=>Object.keys(Re(e)).map(n=>[n,Te(n,e)]),map:De};const Ce="FLAG",Le="BASIC",Je="DETAILED",Ve="VERBOSE";let _e=Je;const Be=(e,n)=>(t,r=Ce)=>{if(![Ce,Le,Je,Ve].includes(r))throw Error(`The '${r}' error format is not supported`);let a=[];const i=R.subscribe("result",Fe(r,a));return Xe(n,t,e),R.unsubscribe(i),a[0]},Fe=(e,n)=>{const t=[];return(r,a)=>{const i={...a,errors:[]};for(;t.length>0&&ze(t[t.length-1],i);){const n=t.pop();let r=[];if(e===Le&&(r=n.errors,delete n.errors),i.errors.unshift(n,...r),Ue(i))break}(e===Ve||e!==Ce&&!i.valid)&&t.push(i),n[0]=i}},ze=(e,n)=>e.instanceLocation.startsWith(n.instanceLocation)&&(e.absoluteKeywordLocation.startsWith(n.absoluteKeywordLocation)||Ue(e)),Ue=e=>e.keyword.endsWith("#$ref")||e.keyword.endsWith("#$recursiveRef"),Ge={},Ke=e=>Ge[e],We={},He={},Ze=async(e,n,t=!1)=>{if(!e.validated){if(Me.markValidated(e.id),t&&((Me.getConfig(e.schemaVersion,"mandatoryVocabularies")||[]).forEach(n=>{if(!e.vocabulary[n])throw Error(`Vocabulary '${n}' must be explicitly declared and required`)}),Object.entries(e.vocabulary).forEach(([n,t])=>{if(n in We)Object.entries(We[n]).forEach(([n,t])=>{Ge[`${e.id}#${n}`]=t});else if(t)throw Error(`Missing required vocabulary: ${n}`)})),!(e.schemaVersion in He)){const n=await Me.get(e.schemaVersion),t={},r=await Ze(n,t,!0);He[e.schemaVersion]=Be(t,r)}const n=te.cons(e.schema,e.id),r=He[e.schemaVersion](n,_e);if(!r.valid)throw r}return await Ke(`${e.schemaVersion}#validate`).compile(e,n),Me.uri(e)},Xe=(e,n,t)=>{const[r]=t[e];return Ke(r).interpret(e,n,t)};var Qe={validate:async(e,n,t)=>{const r={},a=await Ze(e,r),i=(e,n=Ce)=>Be(r,a)(te.cons(e),n);return void 0===n?i:i(n,t)},setMetaOutputFormat:e=>{_e=e},FLAG:Ce,BASIC:Le,DETAILED:Je,VERBOSE:Ve,getKeyword:Ke,hasKeyword:e=>e in Ge,defineVocabulary:(e,n)=>{We[e]=n},compileSchema:Ze,interpretSchema:Xe};var Ye={compile:()=>void 0,interpret:()=>!0},en=async e=>Object.entries(await e),nn=D(async(e,n)=>(await n).map(e)),tn=D(async(e,n,t)=>(await t).reduce(async(n,t)=>e(await n,t),n)),rn=D(async(e,n,t={})=>tn(async(n,t)=>await e(t)?n.concat([t]):n,[],n,t)),an=D(async(e,n)=>{const t=await nn(e,n);return(await Promise.all(t)).some(e=>e)}),sn=D(async(e,n)=>{const t=await nn(e,n);return(await Promise.all(t)).every(e=>e)}),on=D((e,n)=>e.reduce(async(e,n)=>n(await e),n)),cn={entries:en,map:nn,filter:rn,reduce:tn,some:an,every:sn,pipeline:on,all:e=>Promise.all(e),allValues:e=>on([en,tn(async(e,[n,t])=>(e[n]=await t,e),{})],e)};var ln={compile:async(e,n)=>{const t=Me.uri(e);if(!(t in n)){n[t]=!1;const r=Me.value(e);n[t]=[`${e.schemaVersion}#validate`,Me.uri(e),"boolean"==typeof r?r:await cn.pipeline([Me.entries,cn.map(([n,t])=>[`${e.schemaVersion}#${n}`,t]),cn.filter(([e])=>Qe.hasKeyword(e)&&"validate"!==e),cn.map(async([e,t])=>{const r=await t,a=await Qe.getKeyword(e).compile(r,n);return[e,Me.uri(r),a]}),cn.all],e)]}},interpret:(e,n,t)=>{const[r,a,i]=t[e],s="boolean"==typeof i?i:i.every(([e,r,a])=>{const i=Qe.getKeyword(e).interpret(a,n,t);return R.publishSync("result",{keyword:e,absoluteKeywordLocation:r,instanceLocation:te.uri(n),valid:i}),i});return R.publishSync("result",{keyword:r,absoluteKeywordLocation:a,instanceLocation:te.uri(n),valid:s}),s}},un={JsonSchema:Qe,Schema:Me,Instance:te,Keywords:{metaData:Ye,validate:ln}};const{JsonSchema:mn,Schema:pn,Instance:fn}=un;var dn={compile:async(e,n)=>{let t;try{const n=await pn.sibling("items",e);t=pn.value(n)}catch(e){}const r=Array.isArray(t)?t.length:Number.MAX_SAFE_INTEGER,a=pn.value(e);return"boolean"==typeof a?[r,a]:[r,await mn.compileSchema(e,n)]},interpret:([e,n],t,r)=>!Array.isArray(fn.value(t))||("string"==typeof n?fn.every((t,a)=>a<e||mn.interpretSchema(n,t,r),t):fn.every((t,r)=>r<e||n,t))};const{JsonSchema:hn,Schema:yn,Instance:vn}=un;var gn={compile:async(e,n)=>{let t;try{const n=await yn.sibling("items",e);t=yn.value(n)}catch(e){}return[Array.isArray(t)?t.length:Number.MAX_SAFE_INTEGER,await hn.compileSchema(e,n)]},interpret:([e,n],t,r)=>!Array.isArray(vn.value(t))||vn.every((t,a)=>a<e||hn.interpretSchema(n,t,r),t)};var bn={isObject:e=>"object"==typeof e&&!Array.isArray(e)&&null!==e};const{JsonSchema:$n,Schema:xn,Instance:wn}=un,{isObject:On}=bn;var In={compile:async(e,n)=>{let t,r;try{const n=await xn.sibling("properties",e);t=Object.keys(xn.value(n))}catch(e){t=[]}try{const n=await xn.sibling("patternProperties",e);r=Object.keys(xn.value(n)).map(e=>new RegExp(e))}catch(e){r=[]}const a=xn.value(e);return"boolean"==typeof a?[t,r,a]:[t,r,await $n.compileSchema(e,n)]},interpret:([e,n,t],r,a)=>{const i=wn.value(r);if(!On(i))return!0;const s=wn.entries(r).filter(([t])=>!e.includes(t)&&!n.some(e=>e.test(t)));return"string"==typeof t?s.every(([,e])=>$n.interpretSchema(t,e,a)):0===s.length||t}};const{JsonSchema:Sn,Schema:jn,Instance:An}=un,{isObject:En}=bn;var Pn={compile:async(e,n)=>{let t,r;try{const n=await jn.sibling("properties",e);t=Object.keys(jn.value(n))}catch(e){t=[]}try{const n=await jn.sibling("patternProperties",e);r=Object.keys(jn.value(n)).map(e=>new RegExp(e))}catch(e){r=[]}return[t,r,await Sn.compileSchema(e,n)]},interpret:([e,n,t],r,a)=>{const i=An.value(r);return!En(i)||An.entries(r).filter(([t])=>!e.includes(t)&&!n.some(e=>e.test(t))).every(([,e])=>Sn.interpretSchema(t,e,a))}};const{JsonSchema:kn,Schema:Nn}=un;var qn={compile:(e,n)=>cn.pipeline([Nn.map(async e=>kn.compileSchema(await e,n)),cn.all],e),interpret:(e,n,t)=>e.every(e=>kn.interpretSchema(e,n,t))};const{JsonSchema:Rn,Schema:Tn}=un;var Dn={compile:(e,n)=>cn.pipeline([Tn.map(async e=>Rn.compileSchema(await e,n)),cn.all],e),interpret:(e,n,t)=>e.some(e=>Rn.interpretSchema(e,n,t))},Mn=Object.keys,Cn=JSON.stringify;var Ln=function(e){return""+function e(n,t){var r,a,i,s,o,c,l;if("string"==(l=typeof n))return Cn(n);if(!0===n)return"true";if(!1===n)return"false";if(null===n)return"null";if(n instanceof Array){for(i="[",a=n.length-1,r=0;r<a;r++)i+=e(n[r],!1)+",";return a>-1&&(i+=e(n[r],!1)),i+"]"}if(n instanceof Object){if("function"==typeof n.toJSON)return e(n.toJSON(),t);for(a=(s=Mn(n).sort()).length,i="",r=0;r<a;)void 0!==(c=e(n[o=s[r]],!0))&&(r&&""!==i&&(i+=","),i+=Cn(o)+":"+c),r++;return"{"+i+"}"}switch(l){case"function":case"undefined":return t?void 0:null;default:return isFinite(n)?n:null}}(e,!1)};const{Schema:Jn,Instance:Vn}=un;var _n={compile:e=>Ln(Jn.value(e)),interpret:(e,n)=>Ln(Vn.value(n))===e};const{JsonSchema:Bn,Instance:Fn}=un;var zn={compile:(e,n)=>Bn.compileSchema(e,n),interpret:(e,n,t)=>{const r=Fn.value(n);return!Array.isArray(r)||Fn.some(n=>Bn.interpretSchema(e,n,t),n)}};const{JsonSchema:Un,Schema:Gn,Instance:Kn}=un;var Wn={compile:async(e,n)=>{const t={};t.contains=await Un.compileSchema(e,n);try{const n=await Gn.sibling("minContains",e);t.minContains=Gn.value(n)}catch(e){t.minContains=1}try{const n=await Gn.sibling("maxContains",e);t.maxContains=Gn.value(n)}catch(e){t.maxContains=Number.MAX_SAFE_INTEGER}return t},interpret:({contains:e,minContains:n,maxContains:t},r,a)=>{const i=Kn.value(r);if(!Array.isArray(i))return!0;const s=Kn.reduce((n,t)=>Un.interpretSchema(e,t,a)?n+1:n,0,r);return s>=n&&s<=t}};const{JsonSchema:Hn,Schema:Zn}=un;var Xn={compile:async(e,n)=>{await cn.pipeline([Zn.entries,cn.map(async([,e])=>Hn.compileSchema(await e,n)),cn.all],e)},interpret:()=>!0};const{JsonSchema:Qn,Schema:Yn,Instance:et}=un,{isObject:nt}=bn;var tt={compile:(e,n)=>cn.pipeline([Yn.entries,cn.map(async([e,t])=>{const r=await t,a=await Yn.value(r);return[e,Array.isArray(a)?a:await Qn.compileSchema(r,n)]}),cn.all],e),interpret:(e,n,t)=>{const r=et.value(n);return!nt(r)||e.every(([e,a])=>!(e in r)||(Array.isArray(a)?a.every(e=>e in r):Qn.interpretSchema(a,n,t)))}};const{Schema:rt,Instance:at}=un,{isObject:it}=bn;var st={compile:e=>cn.pipeline([rt.entries,cn.map(async([e,n])=>[e,await rt.value(await n)]),cn.all],e),interpret:(e,n)=>{const t=at.value(n);return!it(t)||e.every(([e,n])=>!(e in t)||n.every(e=>e in t))}};const{JsonSchema:ot,Schema:ct,Instance:lt}=un,{isObject:ut}=bn;var mt={compile:(e,n)=>cn.pipeline([ct.entries,cn.map(async([e,t])=>[e,await ot.compileSchema(await t,n)]),cn.all],e),interpret:(e,n,t)=>{const r=lt.value(n);return!ut(r)||e.every(([e,a])=>!(e in r)||ot.interpretSchema(a,n,t))}};const{Schema:pt,Instance:ft}=un;var dt={compile:e=>pt.value(e).map(Ln),interpret:(e,n)=>e.some(e=>Ln(ft.value(n))===e)};const{Schema:ht,Instance:yt}=un;var vt={compile:async e=>ht.value(e),interpret:(e,n)=>{const t=yt.value(n);return"number"!=typeof t||t<e}};const{Schema:gt,Instance:bt}=un;var $t={compile:async e=>gt.value(e),interpret:(e,n)=>{const t=bt.value(n);return"number"!=typeof t||t>e}};const{Schema:xt,Instance:wt}=un;var Ot={compile:async e=>xt.value(e),interpret:(e,n)=>{const t=wt.value(n);return"number"!=typeof t||"boolean"==typeof e||t<e}};const{Schema:It,Instance:St}=un;var jt={compile:async e=>It.value(e),interpret:(e,n)=>{const t=St.value(n);return"number"!=typeof t||"boolean"==typeof e||t>e}};const{JsonSchema:At,Schema:Et}=un;var Pt={compile:async(e,n)=>{const t={};t.if=await At.compileSchema(e,n);try{const r=await Et.sibling("then",e);t.then=await At.compileSchema(r,n)}catch(e){}try{const r=await Et.sibling("else",e);t.else=await At.compileSchema(r,n)}catch(e){}return t},interpret:(e,n,t)=>At.interpretSchema(e.if,n,t)?!("then"in e)||At.interpretSchema(e.then,n,t):!("else"in e)||At.interpretSchema(e.else,n,t)};const{JsonSchema:kt,Schema:Nt,Instance:qt}=un;var Rt={compile:(e,n)=>Array.isArray(Nt.value(e))?cn.pipeline([Nt.map(e=>kt.compileSchema(e,n)),cn.all],e):kt.compileSchema(e,n),interpret:(e,n,t)=>!Array.isArray(qt.value(n))||("string"==typeof e?qt.every(n=>kt.interpretSchema(e,n,t),n):qt.every((n,r)=>!(r in e)||kt.interpretSchema(e[r],n,t),n))};const{Schema:Tt,Instance:Dt}=un;var Mt={compile:e=>Tt.value(e),interpret:(e,n)=>{const t=Dt.value(n);return!Array.isArray(t)||t.length<=e}};const{Schema:Ct,Instance:Lt}=un;var Jt={compile:e=>Ct.value(e),interpret:(e,n)=>{const t=Lt.value(n);return"string"!=typeof t||t.length<=e}};const{Schema:Vt,Instance:_t}=un;var Bt={compile:e=>Vt.value(e),interpret:(e,n)=>{const t=_t.value(n);return"string"!=typeof t||[...t].length<=e}};const{Schema:Ft,Instance:zt}=un,{isObject:Ut}=bn;var Gt={compile:e=>Ft.value(e),interpret:(e,n)=>{const t=zt.value(n);return!Ut(t)||Object.keys(t).length<=e}};const{Schema:Kt,Instance:Wt}=un;var Ht={compile:async e=>{let n;try{const t=await Kt.sibling("exclusiveMaximum",e);n=Kt.value(t)}catch(e){n=!1}return[Kt.value(e),n]},interpret:([e,n],t)=>{const r=Wt.value(t);return"number"!=typeof r||(n?r<e:r<=e)}};const{Schema:Zt,Instance:Xt}=un;var Qt={compile:async e=>{let n;try{const t=await Zt.sibling("exclusiveMaximum",e),r=Zt.value(t);n="boolean"==typeof r&&r}catch(e){n=!1}return[Zt.value(e),n]},interpret:([e,n],t)=>{const r=Xt.value(t);return"number"!=typeof r||(n?r<e:r<=e)}};const{Schema:Yt,Instance:er}=un;var nr={compile:async e=>Yt.value(e),interpret:(e,n)=>{const t=er.value(n);return"number"!=typeof t||t<=e}};const{Schema:tr,Instance:rr}=un;var ar={compile:e=>tr.value(e),interpret:(e,n)=>{const t=rr.value(n);return!Array.isArray(t)||t.length>=e}};const{Schema:ir,Instance:sr}=un;var or={compile:e=>ir.value(e),interpret:(e,n)=>{const t=sr.value(n);return"string"!=typeof t||t.length>=e}};const{Schema:cr,Instance:lr}=un;var ur={compile:e=>cr.value(e),interpret:(e,n)=>{const t=lr.value(n);return"string"!=typeof t||[...t].length>=e}};const{Schema:mr,Instance:pr}=un,{isObject:fr}=bn;var dr={compile:e=>mr.value(e),interpret:(e,n)=>{const t=pr.value(n);return!fr(t)||Object.keys(t).length>=e}};const{Schema:hr,Instance:yr}=un;var vr={compile:async e=>{let n;try{const t=await hr.sibling("exclusiveMinimum",e);n=hr.value(t)}catch(e){n=!1}return[hr.value(e),n]},interpret:([e,n],t)=>{const r=yr.value(t);return"number"!=typeof r||(n?r>e:r>=e)}};const{Schema:gr,Instance:br}=un;var $r={compile:async e=>{let n;try{const t=await gr.sibling("exclusiveMinimum",e),r=gr.value(t);n="boolean"==typeof r&&r}catch(e){n=!1}return[gr.value(e),n]},interpret:([e,n],t)=>{const r=br.value(t);return"number"!=typeof r||(n?r>e:r>=e)}};const{Schema:xr,Instance:wr}=un;var Or={compile:async e=>xr.value(e),interpret:(e,n)=>{const t=wr.value(n);return"number"!=typeof t||t>=e}};const{Schema:Ir,Instance:Sr}=un,jr=(e,n)=>Math.abs(e-n)<Number.EPSILON;var Ar={compile:e=>Ir.value(e),interpret:(e,n)=>{const t=Sr.value(n);if("number"!=typeof t)return!0;const r=t%e;return jr(0,r)||jr(e,r)}};const{JsonSchema:Er}=un;var Pr={compile:(e,n)=>Er.compileSchema(e,n),interpret:(e,n,t)=>!Er.interpretSchema(e,n,t)};const{JsonSchema:kr,Schema:Nr}=un;var qr={compile:(e,n)=>cn.pipeline([Nr.map(async e=>kr.compileSchema(await e,n)),cn.all],e),interpret:(e,n,t)=>{let r=0;for(const a of e)if(kr.interpretSchema(a,n,t)&&r++,r>1)break;return 1===r}};const{Schema:Rr,Instance:Tr}=un;var Dr={compile:e=>new RegExp(Rr.value(e)),interpret:(e,n)=>{const t=Tr.value(n);return"string"!=typeof t||e.test(t)}};const{JsonSchema:Mr,Schema:Cr,Instance:Lr}=un,{isObject:Jr}=bn;var Vr={compile:(e,n)=>cn.pipeline([Cr.entries,cn.map(async([e,t])=>[new RegExp(e),await Mr.compileSchema(await t,n)]),cn.all],e),interpret:(e,n,t)=>{const r=Lr.value(n);return!Jr(r)||e.every(([e,r])=>Lr.entries(n).filter(([n])=>e.test(n)).every(([,e])=>Mr.interpretSchema(r,e,t)))}};const{JsonSchema:_r,Schema:Br,Instance:Fr}=un,{isObject:zr}=bn;var Ur={compile:(e,n)=>cn.pipeline([Br.entries,cn.reduce(async(e,[t,r])=>(e[t]=await _r.compileSchema(await r,n),e),{})],e),interpret:(e,n,t)=>!zr(Fr.value(n))||Fr.entries(n).filter(([n])=>n in e).every(([n,r])=>_r.interpretSchema(e[n],r,t))};const{JsonSchema:Gr,Instance:Kr}=un,{isObject:Wr}=bn;var Hr={compile:(e,n)=>Gr.compileSchema(e,n),interpret:(e,n,t)=>{const r=Kr.value(n);return!Wr(r)||Object.keys(r).every(n=>Gr.interpretSchema(e,Kr.cons(n),t))}};const{JsonSchema:Zr}=un;var Xr={compile:async(e,n)=>Zr.compileSchema(e,n),interpret:(e,n,t)=>Zr.interpretSchema(e,n,t)};const{JsonSchema:Qr}=un;var Yr={compile:(e,n)=>Qr.compileSchema(e,n),interpret:(e,n,t)=>Qr.interpretSchema(e,n,t)};const{Schema:ea,Instance:na}=un,{isObject:ta}=bn;var ra={compile:e=>ea.value(e),interpret:(e,n)=>{const t=na.value(n);return!ta(t)||e.every(e=>e in t)}};const{Schema:aa,Instance:ia}=un,{isObject:sa}=bn,oa={null:e=>null===e,boolean:e=>"boolean"==typeof e,object:sa,array:e=>Array.isArray(e),number:e=>"number"==typeof e,integer:e=>Number.isInteger(e),string:e=>"string"==typeof e};var ca={compile:e=>aa.value(e),interpret:(e,n)=>{const t=ia.value(n);return"string"==typeof e?oa[e](t):e.some(e=>oa[e](t))}};const{Schema:la,Instance:ua}=un;var ma={compile:e=>la.value(e),interpret:(e,n)=>{if(!1===e)return!0;const t=ua.map(e=>Ln(ua.value(e)),n);return new Set(t).size===t.length}};const{Keywords:pa}=un;var fa={additionalItems:dn,additionalItems6:gn,additionalProperties:In,additionalProperties6:Pn,allOf:qn,anyOf:Dn,const:_n,contains:zn,containsMinContainsMaxContains:Wn,definitions:Xn,dependencies:tt,dependentRequired:st,dependentSchemas:mt,enum:dt,exclusiveMaximum:vt,exclusiveMinimum:$t,exclusiveMaximumOas31:Ot,exclusiveMinimumOas31:jt,ifThenElse:Pt,items:Rt,maxItems:Mt,maxLength:Jt,maxLength6:Bt,maxProperties:Gt,maximumExclusiveMaximum:Ht,maximumExclusiveMaximumOas31:Qt,maximum:nr,metaData:pa.metaData,minItems:ar,minLength:or,minLength6:ur,minProperties:dr,minimumExclusiveMinimum:vr,minimumExclusiveMinimumOas31:$r,minimum:Or,multipleOf:Ar,not:Pr,oneOf:qr,pattern:Dr,patternProperties:Vr,properties:Ur,propertyNames:Hr,$recursiveRef:Xr,$ref:Yr,required:ra,type:ca,uniqueItems:ma,validate:pa.validate};const{JsonSchema:da,Schema:ha}=un,ya="http://json-schema.org/draft-04/schema";ha.setConfig(ya,"jsonReference",!0),ha.setConfig(ya,"idToken","id"),ha.setConfig(ya,"anchorToken","id"),ha.add(JSON.parse('{\n    "id": "http://json-schema.org/draft-04/schema#",\n    "$schema": "http://json-schema.org/draft-04/schema#",\n    "description": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "positiveInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "positiveIntegerDefault0": {\n            "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]\n        },\n        "simpleTypes": {\n            "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "minItems": 1,\n            "uniqueItems": true\n        }\n    },\n    "type": "object",\n    "properties": {\n        "id": {\n            "type": "string"\n        },\n        "$schema": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "multipleOf": {\n            "type": "number",\n            "minimum": 0,\n            "exclusiveMinimum": true\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "boolean",\n            "default": false\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxLength": { "$ref": "#/definitions/positiveInteger" },\n        "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/positiveInteger" },\n        "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxProperties": { "$ref": "#/definitions/positiveInteger" },\n        "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": {\n            "anyOf": [\n                { "type": "boolean" },\n                { "$ref": "#" }\n            ],\n            "default": {}\n        },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "dependencies": {\n        "exclusiveMaximum": [ "maximum" ],\n        "exclusiveMinimum": [ "minimum" ]\n    },\n    "default": {}\n}')),da.defineVocabulary(ya,{validate:fa.validate,additionalItems:fa.additionalItems,additionalProperties:fa.additionalProperties,allOf:fa.allOf,anyOf:fa.anyOf,default:fa.metaData,definitions:fa.definitions,dependencies:fa.dependencies,description:fa.metaData,enum:fa.enum,format:fa.metaData,items:fa.items,maxItems:fa.maxItems,maxLength:fa.maxLength,maxProperties:fa.maxProperties,maximum:fa.maximumExclusiveMaximum,minItems:fa.minItems,minLength:fa.minLength,minProperties:fa.minProperties,minimum:fa.minimumExclusiveMinimum,multipleOf:fa.multipleOf,not:fa.not,oneOf:fa.oneOf,pattern:fa.pattern,patternProperties:fa.patternProperties,properties:fa.properties,required:fa.required,title:fa.metaData,type:fa.type,uniqueItems:fa.uniqueItems});const va="http://json-schema.org/draft-04/hyper-schema";ha.setConfig(va,"jsonReference",!0),ha.setConfig(va,"idToken","id"),ha.setConfig(va,"anchorToken","id"),ha.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-04/hyper-schema#",\n    "id": "http://json-schema.org/draft-04/hyper-schema#",\n    "title": "JSON Hyper-Schema",\n    "allOf": [\n        {"$ref": "http://json-schema.org/draft-04/schema#"}\n    ],\n    "properties": {\n        "additionalItems": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "additionalProperties": {\n            "anyOf": [\n                {"type": "boolean"},\n                {"$ref": "#"}\n            ]\n        },\n        "dependencies": {\n            "additionalProperties": {\n                "anyOf": [\n                    {"$ref": "#"},\n                    {"type": "array"}\n                ]\n            }\n        },\n        "items": {\n            "anyOf": [\n                {"$ref": "#"},\n                {"$ref": "#/definitions/schemaArray"}\n            ]\n        },\n        "definitions": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "patternProperties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "properties": {\n            "additionalProperties": {"$ref": "#"}\n        },\n        "allOf": {"$ref": "#/definitions/schemaArray"},\n        "anyOf": {"$ref": "#/definitions/schemaArray"},\n        "oneOf": {"$ref": "#/definitions/schemaArray"},\n        "not": { "$ref": "#" },\n\n        "links": {\n            "type": "array",\n            "items": {"$ref": "#/definitions/linkDescription"}\n        },\n        "fragmentResolution": {\n            "type": "string"\n        },\n        "media": {\n            "type": "object",\n            "properties": {\n                "type": {\n                    "description": "A media type, as described in RFC 2046",\n                    "type": "string"\n                },\n                "binaryEncoding": {\n                    "description": "A content encoding scheme, as described in RFC 2045",\n                    "type": "string"\n                }\n            }\n        },\n        "pathStart": {\n            "description": "Instances\' URIs must start with this value for this schema to apply to them",\n            "type": "string",\n            "format": "uri"\n        }\n    },\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "items": {"$ref": "#"}\n        },\n        "linkDescription": {\n            "title": "Link Description Object",\n            "type": "object",\n            "required": ["href", "rel"],\n            "properties": {\n                "href": {\n                    "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",\n                    "type": "string"\n                },\n                "rel": {\n                    "description": "relation to the target resource of the link",\n                    "type": "string"\n                },\n                "title": {\n                    "description": "a title for the link",\n                    "type": "string"\n                },\n                "targetSchema": {\n                    "description": "JSON Schema describing the link target",\n                    "$ref": "#"\n                },\n                "mediaType": {\n                    "description": "media type (as defined by RFC 2046) describing the link target",\n                    "type": "string"\n                },\n                "method": {\n                    "description": "method for requesting the target of the link (e.g. for HTTP this might be \\"GET\\" or \\"DELETE\\")",\n                    "type": "string"\n                },\n                "encType": {\n                    "description": "The media type in which to submit data along with the request",\n                    "type": "string",\n                    "default": "application/json"\n                },\n                "schema": {\n                    "description": "Schema describing the data to submit along with the request",\n                    "$ref": "#"\n                }\n            }\n        },\n        "readOnly": {\n            "description": "If true, indicates that the value of this property is controlled by the server.",\n            "type": "boolean",\n            "default": false\n        }\n    },\n    "links": [\n        {\n            "rel": "self",\n            "href": "{+id}"\n        },\n        {\n            "rel": "full",\n            "href": "{+($ref)}"\n        }\n    ]\n}')),da.defineVocabulary(va,{validate:fa.validate,additionalItems:fa.additionalItems,additionalProperties:fa.additionalProperties,allOf:fa.allOf,anyOf:fa.anyOf,default:fa.metaData,definitions:fa.definitions,dependencies:fa.dependencies,description:fa.metaData,enum:fa.enum,format:fa.metaData,fragmentResolution:fa.metaData,items:fa.items,maxItems:fa.maxItems,minProperties:fa.minProperties,maxProperties:fa.maxProperties,maximum:fa.maximumExclusiveMaximum,media:fa.metaData,minItems:fa.minItems,minLength:fa.minLength,maxLength:fa.maxLength,minimum:fa.minimumExclusiveMinimum,multipleOf:fa.multipleOf,links:fa.metaData,not:fa.not,oneOf:fa.oneOf,pathStart:fa.metaData,pattern:fa.pattern,patternProperties:fa.patternProperties,properties:fa.properties,readOnly:fa.metaData,required:fa.required,title:fa.metaData,type:fa.type,uniqueItems:fa.uniqueItems});const{JsonSchema:ga,Schema:ba}=un,$a="http://json-schema.org/draft-06/schema";ba.setConfig($a,"jsonReference",!0),ba.setConfig($a,"idToken","$id"),ba.setConfig($a,"anchorToken","$id"),ba.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-06/schema#",\n    "$id": "http://json-schema.org/draft-06/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": {},\n        "examples": {\n            "type": "array",\n            "items": {}\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": {}\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": {},\n        "enum": {\n            "type": "array",\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": {}\n}')),ga.defineVocabulary($a,{validate:fa.validate,additionalItems:fa.additionalItems6,additionalProperties:fa.additionalProperties6,allOf:fa.allOf,anyOf:fa.anyOf,const:fa.const,contains:fa.contains,default:fa.metaData,definitions:fa.definitions,dependencies:fa.dependencies,description:fa.metaData,enum:fa.enum,examples:fa.metaData,exclusiveMaximum:fa.exclusiveMaximum,exclusiveMinimum:fa.exclusiveMinimum,format:fa.metaData,items:fa.items,maxItems:fa.maxItems,maxLength:fa.maxLength6,maxProperties:fa.maxProperties,maximum:fa.maximum,minItems:fa.minItems,minLength:fa.minLength6,minProperties:fa.minProperties,minimum:fa.minimum,multipleOf:fa.multipleOf,not:fa.not,oneOf:fa.oneOf,pattern:fa.pattern,patternProperties:fa.patternProperties,properties:fa.properties,propertyNames:fa.propertyNames,required:fa.required,title:fa.metaData,type:fa.type,uniqueItems:fa.uniqueItems});const{JsonSchema:xa,Schema:wa}=un,Oa="http://json-schema.org/draft-07/schema";wa.setConfig(Oa,"jsonReference",!0),wa.setConfig(Oa,"idToken","$id"),wa.setConfig(Oa,"anchorToken","$id"),wa.add(JSON.parse('{\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "$id": "http://json-schema.org/draft-07/schema#",\n    "title": "Core schema meta-schema",\n    "definitions": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$ref": "#" }\n        },\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "allOf": [\n                { "$ref": "#/definitions/nonNegativeInteger" },\n                { "default": 0 }\n            ]\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    },\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        },\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "additionalItems": { "$ref": "#" },\n        "items": {\n            "anyOf": [\n                { "$ref": "#" },\n                { "$ref": "#/definitions/schemaArray" }\n            ],\n            "default": true\n        },\n        "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "contains": { "$ref": "#" },\n        "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/definitions/stringArray" },\n        "additionalProperties": { "$ref": "#" },\n        "definitions": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$ref": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependencies": {\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$ref": "#" },\n                    { "$ref": "#/definitions/stringArray" }\n                ]\n            }\n        },\n        "propertyNames": { "$ref": "#" },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true,\n            "minItems": 1,\n            "uniqueItems": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/definitions/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/definitions/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        },\n        "format": { "type": "string" },\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "if": { "$ref": "#" },\n        "then": { "$ref": "#" },\n        "else": { "$ref": "#" },\n        "allOf": { "$ref": "#/definitions/schemaArray" },\n        "anyOf": { "$ref": "#/definitions/schemaArray" },\n        "oneOf": { "$ref": "#/definitions/schemaArray" },\n        "not": { "$ref": "#" }\n    },\n    "default": true\n}')),xa.defineVocabulary(Oa,{validate:fa.validate,additionalItems:fa.additionalItems6,additionalProperties:fa.additionalProperties6,allOf:fa.allOf,anyOf:fa.anyOf,const:fa.const,contains:fa.contains,default:fa.metaData,definitions:fa.definitions,dependencies:fa.dependencies,description:fa.metaData,enum:fa.enum,exclusiveMaximum:fa.exclusiveMaximum,exclusiveMinimum:fa.exclusiveMinimum,format:fa.metaData,if:fa.ifThenElse,items:fa.items,maxItems:fa.maxItems,maxLength:fa.maxLength6,maxProperties:fa.maxProperties,maximum:fa.maximum,minItems:fa.minItems,minLength:fa.minLength6,minProperties:fa.minProperties,minimum:fa.minimum,multipleOf:fa.multipleOf,not:fa.not,oneOf:fa.oneOf,pattern:fa.pattern,patternProperties:fa.patternProperties,properties:fa.properties,propertyNames:fa.propertyNames,readOnly:fa.metaData,required:fa.required,title:fa.metaData,type:fa.type,uniqueItems:fa.uniqueItems,writeOnly:fa.metaData});const{JsonSchema:Ia,Schema:Sa}=un,ja="https://json-schema.org/draft/2019-09/schema";Sa.setConfig(ja,"keywordReference",!0),Sa.setConfig(ja,"keywordRecursiveReference",!0),Sa.setConfig(ja,"idToken","$id"),Sa.setConfig(ja,"anchorToken","$anchor"),Sa.setConfig(ja,"vocabulary",!0),Sa.setConfig(ja,"mandatoryVocabularies",["https://json-schema.org/draft/2019-09/vocab/core"]),Sa.add(JSON.parse('{\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$id": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/core": true,\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true,\n        "https://json-schema.org/draft/2019-09/vocab/validation": true,\n        "https://json-schema.org/draft/2019-09/vocab/meta-data": true,\n        "https://json-schema.org/draft/2019-09/vocab/format": false,\n        "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "meta/core"},\n        {"$ref": "meta/applicator"},\n        {"$ref": "meta/validation"},\n        {"$ref": "meta/meta-data"},\n        {"$ref": "meta/format"},\n        {"$ref": "meta/content"}\n    ],\n    "type": ["object", "boolean"],\n    "properties": {\n        "definitions": {\n            "$comment": "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "dependencies": {\n            "$comment": "\\"dependencies\\" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to \\"dependentSchemas\\" and \\"dependentRequired\\"",\n            "type": "object",\n            "additionalProperties": {\n                "anyOf": [\n                    { "$recursiveRef": "#" },\n                    { "$ref": "meta/validation#/$defs/stringArray" }\n                ]\n            }\n        }\n    }\n}')),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/core",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/core": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "$id": {\n            "type": "string",\n            "format": "uri-reference",\n            "$comment": "Non-empty fragments not allowed.",\n            "pattern": "^[^#]*#?$"\n        },\n        "$schema": {\n            "type": "string",\n            "format": "uri"\n        },\n        "$anchor": {\n            "type": "string",\n            "pattern": "^[A-Za-z][-A-Za-z0-9.:_]*$"\n        },\n        "$ref": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveRef": {\n            "type": "string",\n            "format": "uri-reference"\n        },\n        "$recursiveAnchor": {\n            "type": "boolean",\n            "const": true,\n            "default": false\n        },\n        "$vocabulary": {\n            "type": "object",\n            "propertyNames": {\n                "type": "string",\n                "format": "uri"\n            },\n            "additionalProperties": {\n                "type": "boolean"\n            }\n        },\n        "$comment": {\n            "type": "string"\n        },\n        "$defs": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        }\n    }\n}')),Ia.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/core",{validate:fa.validate,$comment:fa.metaData,$defs:fa.definitions,$recursiveRef:fa.$recursiveRef,$ref:fa.$ref}),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/applicator",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/applicator": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Applicator vocabulary meta-schema",\n    "properties": {\n        "additionalItems": { "$recursiveRef": "#" },\n        "unevaluatedItems": { "$recursiveRef": "#" },\n        "items": {\n            "anyOf": [\n                { "$recursiveRef": "#" },\n                { "$ref": "#/$defs/schemaArray" }\n            ]\n        },\n        "contains": { "$recursiveRef": "#" },\n        "additionalProperties": { "$recursiveRef": "#" },\n        "unevaluatedProperties": { "$recursiveRef": "#" },\n        "properties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "default": {}\n        },\n        "patternProperties": {\n            "type": "object",\n            "additionalProperties": { "$recursiveRef": "#" },\n            "propertyNames": { "format": "regex" },\n            "default": {}\n        },\n        "dependentSchemas": {\n            "type": "object",\n            "additionalProperties": {\n                "$recursiveRef": "#"\n            }\n        },\n        "propertyNames": { "$recursiveRef": "#" },\n        "if": { "$recursiveRef": "#" },\n        "then": { "$recursiveRef": "#" },\n        "else": { "$recursiveRef": "#" },\n        "allOf": { "$ref": "#/$defs/schemaArray" },\n        "anyOf": { "$ref": "#/$defs/schemaArray" },\n        "oneOf": { "$ref": "#/$defs/schemaArray" },\n        "not": { "$recursiveRef": "#" }\n    },\n    "$defs": {\n        "schemaArray": {\n            "type": "array",\n            "minItems": 1,\n            "items": { "$recursiveRef": "#" }\n        }\n    }\n}')),Ia.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/applicator",{additionalItems:fa.additionalItems,additionalProperties:fa.additionalProperties,allOf:fa.allOf,anyOf:fa.anyOf,contains:fa.containsMinContainsMaxContains,dependentSchemas:fa.dependentSchemas,if:fa.ifThenElse,items:fa.items,not:fa.not,oneOf:fa.oneOf,patternProperties:fa.patternProperties,properties:fa.properties,propertyNames:fa.propertyNames}),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/validation",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/validation": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": "number"\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": "number"\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),Ia.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/validation",{const:fa.const,dependentRequired:fa.dependentRequired,enum:fa.enum,exclusiveMaximum:fa.exclusiveMaximum,exclusiveMinimum:fa.exclusiveMinimum,maxItems:fa.maxItems,maxLength:fa.maxLength6,maxProperties:fa.maxProperties,maximum:fa.maximum,minItems:fa.minItems,minLength:fa.minLength6,minProperties:fa.minProperties,minimum:fa.minimum,multipleOf:fa.multipleOf,pattern:fa.pattern,required:fa.required,type:fa.type,uniqueItems:fa.uniqueItems}),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/meta-data",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/meta-data": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Meta-data vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "title": {\n            "type": "string"\n        },\n        "description": {\n            "type": "string"\n        },\n        "default": true,\n        "deprecated": {\n            "type": "boolean",\n            "default": false\n        },\n        "readOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "writeOnly": {\n            "type": "boolean",\n            "default": false\n        },\n        "examples": {\n            "type": "array",\n            "items": true\n        }\n    }\n}')),Ia.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/meta-data",{default:fa.metaData,deprecated:fa.metaData,description:fa.metaData,examples:fa.metaData,readOnly:fa.metaData,title:fa.metaData,writeOnly:fa.metaData}),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/format",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/format": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Format vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "format": { "type": "string" }\n    }\n}')),Sa.add(JSON.parse('{\n    "$id": "https://json-schema.org/draft/2019-09/meta/content",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://json-schema.org/draft/2019-09/vocab/content": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Content vocabulary meta-schema",\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "contentMediaType": { "type": "string" },\n        "contentEncoding": { "type": "string" },\n        "contentSchema": { "$recursiveRef": "#" }\n    }\n}')),Ia.defineVocabulary("https://json-schema.org/draft/2019-09/vocab/content",{contentEncoding:fa.metaData,contentMediaType:fa.metaData,contentSchema:fa.metaData});const{JsonSchema:Aa,Schema:Ea}=un;Ea.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/schema-object/2019-10",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n        "https://json-schema.org/draft/2019-09/vocab/core": true,\n        "https://json-schema.org/draft/2019-09/vocab/applicator": true,\n        "https://json-schema.org/draft/2019-09/vocab/meta-data": true,\n        "https://json-schema.org/draft/2019-09/vocab/format": false,\n        "https://json-schema.org/draft/2019-09/vocab/content": true,\n        "https://spec.openapis.org/oas/3.1/vocab/validation/2019-10": true,\n        "https://spec.openapis.org/oas/3.1/vocab/extensions/2019-10": true\n    },\n    "$recursiveAnchor": true,\n\n    "title": "Core and Validation specifications meta-schema",\n    "allOf": [\n        {"$ref": "https://json-schema.org/draft/2019-09/meta/core"},\n        {"$ref": "https://json-schema.org/draft/2019-09/meta/applicator"},\n        {"$ref": "https://json-schema.org/draft/2019-09/meta/meta-data"},\n        {"$ref": "https://json-schema.org/draft/2019-09/meta/format"},\n        {"$ref": "https://json-schema.org/draft/2019-09/meta/content"},\n        {"$ref": "https://spec.openapis.org/oas/3.1/meta/validation/2019-10"},\n        {"$ref": "https://spec.openapis.org/oas/3.1/meta/extensions/2019-10"}\n    ],\n    "type": ["object", "boolean"],\n    "unevaluatedProperties": false\n}')),Ea.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/validation/2019-10",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://spec.openapis.org/oas/3.1/vocab/validation/2019-10": true\n    },\n    "$recursiveAnchor": true,\n\n    "$comment": "This is an alternate meta-schema for the standard validation vocabulary.  It is identical to the standard validation meta-schema except that it omits exclusiveMinimum and exclusiveMaximum, which are described by the OpenAPI extensions meta-schema.",\n\n    "title": "Validation vocabulary meta-schema",\n    "type": ["object", "boolean"],\n    "properties": {\n        "multipleOf": {\n            "type": "number",\n            "exclusiveMinimum": 0\n        },\n        "maxLength": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minLength": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "pattern": {\n            "type": "string",\n            "format": "regex"\n        },\n        "maxItems": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minItems": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "uniqueItems": {\n            "type": "boolean",\n            "default": false\n        },\n        "maxContains": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minContains": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 1\n        },\n        "maxProperties": { "$ref": "#/$defs/nonNegativeInteger" },\n        "minProperties": { "$ref": "#/$defs/nonNegativeIntegerDefault0" },\n        "required": { "$ref": "#/$defs/stringArray" },\n        "dependentRequired": {\n            "type": "object",\n            "additionalProperties": {\n                "$ref": "#/$defs/stringArray"\n            }\n        },\n        "const": true,\n        "enum": {\n            "type": "array",\n            "items": true\n        },\n        "type": {\n            "anyOf": [\n                { "$ref": "#/$defs/simpleTypes" },\n                {\n                    "type": "array",\n                    "items": { "$ref": "#/$defs/simpleTypes" },\n                    "minItems": 1,\n                    "uniqueItems": true\n                }\n            ]\n        }\n    },\n    "$defs": {\n        "nonNegativeInteger": {\n            "type": "integer",\n            "minimum": 0\n        },\n        "nonNegativeIntegerDefault0": {\n            "$ref": "#/$defs/nonNegativeInteger",\n            "default": 0\n        },\n        "simpleTypes": {\n            "enum": [\n                "array",\n                "boolean",\n                "integer",\n                "null",\n                "number",\n                "object",\n                "string"\n            ]\n        },\n        "stringArray": {\n            "type": "array",\n            "items": { "type": "string" },\n            "uniqueItems": true,\n            "default": []\n        }\n    }\n}')),Aa.defineVocabulary("https://spec.openapis.org/oas/3.1/vocab/validation/2019-10",{const:fa.const,dependentRequired:fa.dependentRequired,enum:fa.enum,maxItems:fa.maxItems,maxLength:fa.maxLength6,maxProperties:fa.maxProperties,minItems:fa.minItems,minLength:fa.minLength6,minProperties:fa.minProperties,multipleOf:fa.multipleOf,pattern:fa.pattern,required:fa.required,type:fa.type,uniqueItems:fa.uniqueItems}),Ea.add(JSON.parse('{\n    "$id": "https://spec.openapis.org/oas/3.1/meta/extensions/2019-10",\n    "$schema": "https://json-schema.org/draft/2019-09/schema",\n    "$vocabulary": {\n      "https://spec.openapis.org/oas/3.1/vocab/extensions/2019-10": true\n    },\n    "$recursiveAnchor": true,\n\n    "type": ["object", "boolean"],\n    "properties": {\n        "example": true,\n        "maximum": {\n            "type": "number"\n        },\n        "exclusiveMaximum": {\n            "type": ["number", "boolean"]\n        },\n        "minimum": {\n            "type": "number"\n        },\n        "exclusiveMinimum": {\n            "type": ["number", "boolean"]\n        },\n        "nullable": {\n            "type": "boolean",\n            "default": false\n        },\n        "discriminator": {\n            "$ref": "#/$defs/Discriminator"\n        },\n        "externalDocs": {\n            "$ref": "#/$defs/ExternalDocs"\n        },\n        "xml": {\n            "$ref": "#/$defs/Xml"\n        }\n    },\n    "patternProperties": {\n        "^x-": true\n    },\n    "allOf": [\n        {\n            "if": {\n                "properties": {\n                    "exclusiveMinimum": { "type": "boolean" }\n                },\n                "required": ["exclusiveMinimum"]\n            },\n            "then": {\n                "required": ["minimum"]\n            }\n        },\n        {\n            "if": {\n                "properties": {\n                    "exclusiveMaximum": { "type": "boolean" }\n                },\n                "required": ["exclusiveMaximum"]\n            },\n            "then": {\n                "required": ["maximum"]\n            }\n        }\n    ],\n    "$defs": {\n        "Discriminator": {\n            "type": "object",\n            "required": ["propertyName"],\n            "properties": {\n                "propertyName": {\n                    "type": "string"\n                },\n                "mapping": {\n                    "additionalProperties": {\n                        "type": "string"\n                    }\n                }\n            },\n            "additionalProperties": false\n        },\n        "ExternalDocs": {\n            "type": "object",\n            "required": ["url"],\n            "properties": {\n                "url": {\n                    "type": "string",\n                    "format": "uri-reference"\n                },\n                "description": {\n                    "type": "string"\n                }\n            },\n            "patternProperties": {\n                "^x-": true\n            },\n            "additionalProperties": false\n        },\n        "Xml": {\n            "type": "object",\n            "properties": {\n                "name": {\n                    "type": "string"\n                },\n                "namespace": {\n                    "type": "string",\n                    "format": "uri"\n                },\n                "prefix": {\n                    "type": "string"\n                },\n                "attribute": {\n                    "type": "boolean"\n                },\n                "wrapped": {\n                    "type": "boolean"\n                }\n            },\n            "patternProperties": {\n                "^x-": true\n            },\n            "additionalProperties": false\n        }\n    }\n}')),Aa.defineVocabulary("https://spec.openapis.org/oas/3.1/vocab/extensions/2019-10",{discriminator:fa.metaData,example:fa.metaData,exclusiveMaximum:fa.exclusiveMaximumOas31,exclusiveMinimum:fa.exclusiveMinimumOas31,externalDocs:fa.metaData,maximum:fa.maximumExclusiveMaximumOas31,minimum:fa.minimumExclusiveMinimumOas31,nullable:fa.metaData,xml:fa.metaData});const{JsonSchema:Pa,Schema:ka}=un;var Na={add:ka.add,get:ka.get,validate:Pa.validate,setMetaOutputFormat:Pa.setMetaOutputFormat,FLAG:Pa.FLAG,BASIC:Pa.BASIC,DETAILED:Pa.DETAILED,VERBOSE:Pa.VERBOSE};const qa='(?:[^\\"]|\\(?:["/\\bfnrt]|u[0-9a-fA-F]{4})',Ra=`"${qa}*"`,Ta=`"${qa}*"(?=:)`;var Da=q(function(e){var n,t;n=N,t=function(){var e=Object.prototype.hasOwnProperty,n=Object.prototype.toString,t="boolean"==typeof(new RegExp).sticky;function r(e){return e&&"[object RegExp]"===n.call(e)}function a(e){return e&&"object"==typeof e&&!r(e)&&!Array.isArray(e)}function i(e){return"("+e+")"}function s(e){return e.length?"(?:"+e.map(function(e){return"(?:"+e+")"}).join("|")+")":"(?!)"}function o(e){if("string"==typeof e)return"(?:"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+")";if(r(e)){if(e.ignoreCase)throw new Error("RegExp /i flag not allowed");if(e.global)throw new Error("RegExp /g flag is implied");if(e.sticky)throw new Error("RegExp /y flag is implied");if(e.multiline)throw new Error("RegExp /m flag is implied");return e.source}throw new Error("Not a pattern: "+e)}function c(n,t){if(a(t)||(t={match:t}),t.include)throw new Error("Matching rules cannot also include states");var i={defaultType:n,lineBreaks:!!t.error||!!t.fallback,pop:!1,next:null,push:null,error:!1,fallback:!1,value:null,type:null,shouldThrow:!1};for(var s in t)e.call(t,s)&&(i[s]=t[s]);if("string"==typeof i.type&&n!==i.type)throw new Error("Type transform cannot be a string (type '"+i.type+"' for token '"+n+"')");var o=i.match;return i.match=Array.isArray(o)?o:o?[o]:[],i.match.sort(function(e,n){return r(e)&&r(n)?0:r(n)?-1:r(e)?1:n.length-e.length}),i}function l(e){return Array.isArray(e)?function(e){for(var n=[],t=0;t<e.length;t++){var r=e[t];if(r.include)for(var a=[].concat(r.include),i=0;i<a.length;i++)n.push({include:a[i]});else{if(!r.type)throw new Error("Rule has no type: "+JSON.stringify(r));n.push(c(r.type,r))}}return n}(e):function(e){for(var n=Object.getOwnPropertyNames(e),t=[],r=0;r<n.length;r++){var i=n[r],s=e[i],o=[].concat(s);if("include"!==i){var l=[];o.forEach(function(e){a(e)?(l.length&&t.push(c(i,l)),t.push(c(i,e)),l=[]):l.push(e)}),l.length&&t.push(c(i,l))}else for(var u=0;u<o.length;u++)t.push({include:o[u]})}return t}(e)}var u=c("error",{lineBreaks:!0,shouldThrow:!0});function m(e,n){for(var a=null,c=Object.create(null),l=!0,m=null,p=[],f=[],d=0;d<e.length;d++)e[d].fallback&&(l=!1);for(d=0;d<e.length;d++){var h=e[d];if(h.include)throw new Error("Inheritance is not allowed in stateless lexers");if(h.error||h.fallback){if(a)throw!h.fallback==!a.fallback?new Error("Multiple "+(h.fallback?"fallback":"error")+" rules not allowed (for token '"+h.defaultType+"')"):new Error("fallback and error are mutually exclusive (for token '"+h.defaultType+"')");a=h}var y=h.match.slice();if(l)for(;y.length&&"string"==typeof y[0]&&1===y[0].length;){c[y.shift().charCodeAt(0)]=h}if(h.pop||h.push||h.next){if(!n)throw new Error("State-switching options are not allowed in stateless lexers (for token '"+h.defaultType+"')");if(h.fallback)throw new Error("State-switching options are not allowed on fallback tokens (for token '"+h.defaultType+"')")}if(0!==y.length){l=!1,p.push(h);for(var v=0;v<y.length;v++){var g=y[v];if(r(g))if(null===m)m=g.unicode;else if(m!==g.unicode&&!1===h.fallback)throw new Error("If one rule is /u then all must be")}var b=s(y.map(o)),$=new RegExp(b);if($.test(""))throw new Error("RegExp matches empty string: "+$);if(new RegExp("|"+b).exec("").length-1>0)throw new Error("RegExp has capture groups: "+$+"\nUse (?: … ) instead");if(!h.lineBreaks&&$.test("\n"))throw new Error("Rule should declare lineBreaks: "+$);f.push(i(b))}}var x=a&&a.fallback,w=t&&!x?"ym":"gm",O=t||x?"":"|";return!0===m&&(w+="u"),{regexp:new RegExp(s(f)+O,w),groups:p,fast:c,error:a||u}}function p(e,n,t){var r=e&&(e.push||e.next);if(r&&!t[r])throw new Error("Missing state '"+r+"' (in token '"+e.defaultType+"' of state '"+n+"')");if(e&&e.pop&&1!=+e.pop)throw new Error("pop must be 1 (in token '"+e.defaultType+"' of state '"+n+"')")}var f=function(e,n){this.startState=n,this.states=e,this.buffer="",this.stack=[],this.reset()};f.prototype.reset=function(e,n){return this.buffer=e||"",this.index=0,this.line=n?n.line:1,this.col=n?n.col:1,this.queuedToken=n?n.queuedToken:null,this.queuedThrow=n?n.queuedThrow:null,this.setState(n?n.state:this.startState),this.stack=n&&n.stack?n.stack.slice():[],this},f.prototype.save=function(){return{line:this.line,col:this.col,state:this.state,stack:this.stack.slice(),queuedToken:this.queuedToken,queuedThrow:this.queuedThrow}},f.prototype.setState=function(e){if(e&&this.state!==e){this.state=e;var n=this.states[e];this.groups=n.groups,this.error=n.error,this.re=n.regexp,this.fast=n.fast}},f.prototype.popState=function(){this.setState(this.stack.pop())},f.prototype.pushState=function(e){this.stack.push(this.state),this.setState(e)};var d=t?function(e,n){return e.exec(n)}:function(e,n){var t=e.exec(n);return 0===t[0].length?null:t};function h(){return this.value}if(f.prototype._getGroup=function(e){for(var n=this.groups.length,t=0;t<n;t++)if(void 0!==e[t+1])return this.groups[t];throw new Error("Cannot find token type for matched text")},f.prototype.next=function(){var e=this.index;if(this.queuedGroup){var n=this._token(this.queuedGroup,this.queuedText,e);return this.queuedGroup=null,this.queuedText="",n}var t=this.buffer;if(e!==t.length){if(s=this.fast[t.charCodeAt(e)])return this._token(s,t.charAt(e),e);var r=this.re;r.lastIndex=e;var a=d(r,t),i=this.error;if(null==a)return this._token(i,t.slice(e,t.length),e);var s=this._getGroup(a),o=a[0];return i.fallback&&a.index!==e?(this.queuedGroup=s,this.queuedText=o,this._token(i,t.slice(e,a.index),e)):this._token(s,o,e)}},f.prototype._token=function(e,n,t){var r=0;if(e.lineBreaks){var a=/\n/g,i=1;if("\n"===n)r=1;else for(;a.exec(n);)r++,i=a.lastIndex}var s={type:"function"==typeof e.type&&e.type(n)||e.defaultType,value:"function"==typeof e.value?e.value(n):n,text:n,toString:h,offset:t,lineBreaks:r,line:this.line,col:this.col},o=n.length;if(this.index+=o,this.line+=r,0!==r?this.col=o-i+1:this.col+=o,e.shouldThrow)throw new Error(this.formatError(s,"invalid syntax"));return e.pop?this.popState():e.push?this.pushState(e.push):e.next&&this.setState(e.next),s},"undefined"!=typeof Symbol&&Symbol.iterator){var y=function(e){this.lexer=e};y.prototype.next=function(){var e=this.lexer.next();return{value:e,done:!e}},y.prototype[Symbol.iterator]=function(){return this},f.prototype[Symbol.iterator]=function(){return new y(this)}}return f.prototype.formatError=function(e,n){if(null==e){var t=this.buffer.slice(this.index);e={text:t,offset:this.index,lineBreaks:-1===t.indexOf("\n")?0:1,line:this.line,col:this.col}}var r=Math.max(0,e.offset-e.col+1),a=e.lineBreaks?e.text.indexOf("\n"):e.text.length,i=this.buffer.substring(r,e.offset+a);return n+=" at line "+e.line+" col "+e.col+":\n\n",n+="  "+i+"\n",n+="  "+Array(e.col).join(" ")+"^"},f.prototype.clone=function(){return new f(this.states,this.state)},f.prototype.has=function(e){return!0},{compile:function(e){var n=m(l(e));return new f({start:n},"start")},states:function(e,n){var t=e.$all?l(e.$all):[];delete e.$all;var r=Object.getOwnPropertyNames(e);n||(n=r[0]);for(var a=Object.create(null),i=0;i<r.length;i++)a[b=r[i]]=l(e[b]).concat(t);for(i=0;i<r.length;i++)for(var s=a[b=r[i]],o=Object.create(null),c=0;c<s.length;c++){var u=s[c];if(u.include){var d=[c,1];if(u.include!==b&&!o[u.include]){o[u.include]=!0;var h=a[u.include];if(!h)throw new Error("Cannot include nonexistent state '"+u.include+"' (in state '"+b+"')");for(var y=0;y<h.length;y++){var v=h[y];-1===s.indexOf(v)&&d.push(v)}}s.splice.apply(s,d),c--}}var g=Object.create(null);for(i=0;i<r.length;i++){var b;g[b=r[i]]=m(a[b],!0)}for(i=0;i<r.length;i++){var $=r[i],x=g[$],w=x.groups;for(c=0;c<w.length;c++)p(w[c],$,g);var O=Object.getOwnPropertyNames(x.fast);for(c=0;c<O.length;c++)p(x.fast[O[c]],$,g)}return new f(g,n)},error:Object.freeze({error:!0}),fallback:Object.freeze({fallback:!0}),keywords:function(e){for(var n=Object.create(null),t=Object.create(null),r=Object.getOwnPropertyNames(e),a=0;a<r.length;a++){var i=r[a],s=e[i];(Array.isArray(s)?s:[s]).forEach(function(e){if((t[e.length]=t[e.length]||[]).push(e),"string"!=typeof e)throw new Error("keyword must be string (in keyword '"+i+"')");n[e]=i})}function o(e){return JSON.stringify(e)}var c="";for(var l in c+="switch (value.length) {\n",t){var u=t[l];c+="case "+l+":\n",c+="switch (value) {\n",u.forEach(function(e){var t=n[e];c+="case "+o(e)+": return "+o(t)+"\n"}),c+="}\n"}return c+="}\n",Function("value",c)}}},e.exports?e.exports=t():n.moo=t()}).compile({WS:{match:/(?:(?:\r?\n)|[ \t])+/,lineBreaks:!0},punctuation:/[:,]/,number:new RegExp("-?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][-+][0-9]+)?"),property:new RegExp(Ta),string:new RegExp(Ra),grouping:["{","}","[","]"],keyword:["null","true","false"],other:/./});function Ma(e,n,t){const r=e.slice();return r[4]=n[t],r}function Ca(e){let n,t=e[4].value+"";return{c(){n=v(t)},l(e){n=g(e,t)},m(e,t){a(e,n,t)},p(e,r){4&r&&t!==(t=e[4].value+"")&&b(n,t)},d(e){e&&i(n)}}}function La(e){let n,t,r=e[4].value+"";return{c(){n=s("span"),t=v(r),this.h()},l(e){n=c(e,"SPAN",{class:!0});var a=l(n);t=g(a,r),a.forEach(i),this.h()},h(){m(n,"class","atom svelte-8fwnou")},m(e,r){a(e,n,r),p(n,t)},p(e,n){4&n&&r!==(r=e[4].value+"")&&b(t,r)},d(e){e&&i(n)}}}function Ja(e){let n,t,r=e[4].value+"";return{c(){n=s("span"),t=v(r),this.h()},l(e){n=c(e,"SPAN",{class:!0});var a=l(n);t=g(a,r),a.forEach(i),this.h()},h(){m(n,"class","number svelte-8fwnou")},m(e,r){a(e,n,r),p(n,t)},p(e,n){4&n&&r!==(r=e[4].value+"")&&b(t,r)},d(e){e&&i(n)}}}function Va(e){let n,t,r,o,u=e[4].value.substring(1,e[4].value.length-1)+"";return{c(){n=v('"'),t=s("span"),r=v(u),o=v('"'),this.h()},l(e){n=g(e,'"'),t=c(e,"SPAN",{class:!0});var a=l(t);r=g(a,u),a.forEach(i),o=g(e,'"'),this.h()},h(){m(t,"class","string svelte-8fwnou")},m(e,i){a(e,n,i),a(e,t,i),p(t,r),a(e,o,i)},p(e,n){4&n&&u!==(u=e[4].value.substring(1,e[4].value.length-1)+"")&&b(r,u)},d(e){e&&i(n),e&&i(t),e&&i(o)}}}function _a(e){let n,t,r,o,u=e[4].value.substring(1,e[4].value.length-1)+"";return{c(){n=v('"'),t=s("span"),r=v(u),o=v('"'),this.h()},l(e){n=g(e,'"'),t=c(e,"SPAN",{class:!0});var a=l(t);r=g(a,u),a.forEach(i),o=g(e,'"'),this.h()},h(){m(t,"class","property svelte-8fwnou")},m(e,i){a(e,n,i),a(e,t,i),p(t,r),a(e,o,i)},p(e,n){4&n&&u!==(u=e[4].value.substring(1,e[4].value.length-1)+"")&&b(r,u)},d(e){e&&i(n),e&&i(t),e&&i(o)}}}function Ba(e){let n,t,r=e[4].value+"";return{c(){n=s("span"),t=v(r),this.h()},l(e){n=c(e,"SPAN",{class:!0});var a=l(n);t=g(a,r),a.forEach(i),this.h()},h(){m(n,"class","grouping svelte-8fwnou")},m(e,r){a(e,n,r),p(n,t)},p(e,n){4&n&&r!==(r=e[4].value+"")&&b(t,r)},d(e){e&&i(n)}}}function Fa(e){let n;function t(e,n){return"grouping"===e[4].type?Ba:"property"===e[4].type?_a:"string"===e[4].type?Va:"number"===e[4].type?Ja:"literal"===e[4].type?La:Ca}let s=t(e),o=s(e);return{c(){o.c(),n=r()},l(e){o.l(e),n=r()},m(e,t){o.m(e,t),a(e,n,t)},p(e,r){s===(s=t(e))&&o?o.p(e,r):(o.d(1),(o=s(e))&&(o.c(),o.m(n.parentNode,n)))},d(e){o.d(e),e&&i(n)}}}function za(e){let n,t,r,v,g,b,$=e[2],x=[];for(let n=0;n<$.length;n+=1)x[n]=Fa(Ma(e,$,n));return{c(){n=s("div"),t=s("pre");for(let e=0;e<x.length;e+=1)x[e].c();r=o(),v=s("textarea"),this.h()},l(e){n=c(e,"DIV",{class:!0});var a=l(n);t=c(a,"PRE",{class:!0});var s=l(t);for(let e=0;e<x.length;e+=1)x[e].l(s);s.forEach(i),r=u(a),v=c(a,"TEXTAREA",{class:!0}),l(v).forEach(i),a.forEach(i),this.h()},h(){m(t,"class","highlighted svelte-8fwnou"),m(v,"class","src svelte-8fwnou"),m(n,"class",g="Editor "+e[1]+" svelte-8fwnou")},m(i,s,o){a(i,n,s),p(n,t);for(let e=0;e<x.length;e+=1)x[e].m(t,null);p(n,r),p(n,v),f(v,e[0]),o&&b(),b=d(v,"input",e[3])},p(e,[r]){if(4&r){let n;for($=e[2],n=0;n<$.length;n+=1){const a=Ma(e,$,n);x[n]?x[n].p(a,r):(x[n]=Fa(a),x[n].c(),x[n].m(t,null))}for(;n<x.length;n+=1)x[n].d(1);x.length=$.length}1&r&&f(v,e[0]),2&r&&g!==(g="Editor "+e[1]+" svelte-8fwnou")&&m(n,"class",g)},i:h,o:h,d(e){e&&i(n),y(x,e),b()}}}function Ua(e,n,t){let r,{theme:a="solarized-dark"}=n,{value:i=""}=n;return e.$set=(e=>{"theme"in e&&t(1,a=e.theme),"value"in e&&t(0,i=e.value)}),e.$$.update=(()=>{1&e.$$.dirty&&t(2,(Da.reset(i),r=Array.from(Da)))}),[i,a,r,function(){i=this.value,t(0,i)}]}class Ga extends e{constructor(e){super(),n(this,e,Ua,za,t,{theme:1,value:0})}}function Ka(e,n,t){const r=e.slice();return r[3]=n[t],r}function Wa(e){let n;function t(e,n){return e[2].absoluteKeywordLocation?Za:Ha}let s=t(e),o=s(e);return{c(){o.c(),n=r()},l(e){o.l(e),n=r()},m(e,t){o.m(e,t),a(e,n,t)},p(e,r){s===(s=t(e))&&o?o.p(e,r):(o.d(1),(o=s(e))&&(o.c(),o.m(n.parentNode,n)))},d(e){o.d(e),e&&i(n)}}}function Ha(e){let n,t=e[2]+"";return{c(){n=v(t)},l(e){n=g(e,t)},m(e,t){a(e,n,t)},p(e,r){1&r&&t!==(t=e[2]+"")&&b(n,t)},d(e){e&&i(n)}}}function Za(e){let n,t,r=e[2].errors,o=[];for(let n=0;n<r.length;n+=1)o[n]=Qa(Ka(e,r,n));return{c(){n=v("Invalid\n    "),t=s("ul");for(let e=0;e<o.length;e+=1)o[e].c()},l(e){n=g(e,"Invalid\n    "),t=c(e,"UL",{});var r=l(t);for(let e=0;e<o.length;e+=1)o[e].l(r);r.forEach(i)},m(e,r){a(e,n,r),a(e,t,r);for(let e=0;e<o.length;e+=1)o[e].m(t,null)},p(e,n){if(1&n){let a;for(r=e[2].errors,a=0;a<r.length;a+=1){const i=Ka(e,r,a);o[a]?o[a].p(i,n):(o[a]=Qa(i),o[a].c(),o[a].m(t,null))}for(;a<o.length;a+=1)o[a].d(1);o.length=r.length}},d(e){e&&i(n),e&&i(t),y(o,e)}}}function Xa(e){let n,t,r,o,u,f,d,h=e[3].instanceLocation+"",y=e[3].absoluteKeywordLocation+"";return{c(){n=s("li"),t=s("code"),r=v("instance"),o=v(h),u=v(" fails schema constraint "),f=s("code"),d=v(y),this.h()},l(e){n=c(e,"LI",{class:!0});var a=l(n);t=c(a,"CODE",{class:!0});var s=l(t);r=g(s,"instance"),o=g(s,h),s.forEach(i),u=g(a," fails schema constraint "),f=c(a,"CODE",{class:!0});var m=l(f);d=g(m,y),m.forEach(i),a.forEach(i),this.h()},h(){m(t,"class","svelte-1sdf2dp"),m(f,"class","svelte-1sdf2dp"),m(n,"class","svelte-1sdf2dp")},m(e,i){a(e,n,i),p(n,t),p(t,r),p(t,o),p(n,u),p(n,f),p(f,d)},p(e,n){1&n&&h!==(h=e[3].instanceLocation+"")&&b(o,h),1&n&&y!==(y=e[3].absoluteKeywordLocation+"")&&b(d,y)},d(e){e&&i(n)}}}function Qa(e){let n,t=!e[3].valid&&Xa(e);return{c(){t&&t.c(),n=r()},l(e){t&&t.l(e),n=r()},m(e,r){t&&t.m(e,r),a(e,n,r)},p(e,r){e[3].valid?t&&(t.d(1),t=null):t?t.p(e,r):((t=Xa(e)).c(),t.m(n.parentNode,n))},d(e){t&&t.d(e),e&&i(n)}}}function Ya(e){let n;return{c(){n=v("Valid")},l(e){n=g(e,"Valid")},m(e,t){a(e,n,t)},p:h,d(e){e&&i(n)}}}function ei(e){let n;return{c(){n=v("Validating ...")},l(e){n=g(e,"Validating ...")},m(e,t){a(e,n,t)},p:h,d(e){e&&i(n)}}}function ni(e){let n,t,s={ctx:e,current:null,token:null,pending:ei,then:Ya,catch:Wa,value:1,error:2};return $(t=e[0],s),{c(){n=r(),s.block.c()},l(e){n=r(),s.block.l(e)},m(e,t){a(e,n,t),s.block.m(e,s.anchor=t),s.mount=(()=>n.parentNode),s.anchor=n},p(n,[r]){if(e=n,s.ctx=e,1&r&&t!==(t=e[0])&&$(t,s));else{const n=e.slice();n[1]=s.resolved,s.block.p(n,r)}},i:h,o:h,d(e){e&&i(n),s.block.d(e),s.token=null,s=null}}}function ti(e,n,t){let{results:r}=n;return e.$set=(e=>{"results"in e&&t(0,r=e.results)}),[r]}class ri extends e{constructor(e){super(),n(this,e,ti,ni,t,{results:0})}}function ai(e){return{c:h,l:h,m:h,p:h,i:h,o:h,d:h}}function ii(e){let n;const t=new ri({props:{results:e[3]}});return{c(){x(t.$$.fragment)},l(e){O(t.$$.fragment,e)},m(e,r){I(t,e,r),n=!0},p(e,n){const r={};8&n&&(r.results=e[3]),t.$set(r)},i(e){n||(S(t.$$.fragment,e),n=!0)},o(e){j(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function si(e){return{c:h,l:h,m:h,p:h,i:h,o:h,d:h}}function oi(e){let n,t,r,f,d,h,y,b,N,q,R,T,D,M,C,L,J,V,_,B,F,z;function U(n){e[4].call(null,n)}let G={};void 0!==e[0]&&(G.value=e[0]);const K=new Ga({props:G});E.push(()=>P(K,"value",U));const W=new ri({props:{results:e[2]}});function H(n){e[5].call(null,n)}let Z={};void 0!==e[1]&&(Z.value=e[1]);const X=new Ga({props:Z});E.push(()=>P(X,"value",H));let Q={ctx:e,current:null,token:null,pending:si,then:ii,catch:ai,value:6,blocks:[,,,]};return $(B=e[2],Q),{c(){n=o(),t=s("h1"),r=v("JSON Schema Validator"),f=o(),d=s("main"),h=s("h2"),y=v("Schema"),b=o(),x(K.$$.fragment),q=o(),R=s("div"),x(W.$$.fragment),D=o(),M=s("h2"),C=v("Instance"),L=o(),x(X.$$.fragment),V=o(),_=s("div"),Q.block.c(),this.h()},l(e){w('[data-svelte="svelte-1ggnpw2"]',document.head).forEach(i),n=u(e),t=c(e,"H1",{class:!0});var a=l(t);r=g(a,"JSON Schema Validator"),a.forEach(i),f=u(e),d=c(e,"MAIN",{class:!0});var s=l(d);h=c(s,"H2",{class:!0});var o=l(h);y=g(o,"Schema"),o.forEach(i),b=u(s),O(K.$$.fragment,s),q=u(s),R=c(s,"DIV",{class:!0});var m=l(R);O(W.$$.fragment,m),m.forEach(i),D=u(s),M=c(s,"H2",{class:!0});var p=l(M);C=g(p,"Instance"),p.forEach(i),L=u(s),O(X.$$.fragment,s),V=u(s),_=c(s,"DIV",{class:!0});var v=l(_);Q.block.l(v),v.forEach(i),s.forEach(i),this.h()},h(){document.title="JSON Schema Validator",m(t,"class","svelte-1g7hysf"),m(h,"class","svelte-1g7hysf"),m(R,"class",T="results "+ui+" svelte-1g7hysf"),m(M,"class","svelte-1g7hysf"),m(_,"class",F="results "+ui+" svelte-1g7hysf"),m(d,"class","svelte-1g7hysf")},m(e,i){a(e,n,i),a(e,t,i),p(t,r),a(e,f,i),a(e,d,i),p(d,h),p(h,y),p(d,b),I(K,d,null),p(d,q),p(d,R),I(W,R,null),p(d,D),p(d,M),p(M,C),p(d,L),I(X,d,null),p(d,V),p(d,_),Q.block.m(_,Q.anchor=null),Q.mount=(()=>_),Q.anchor=null,z=!0},p(n,[t]){e=n;const r={};!N&&1&t&&(N=!0,r.value=e[0],k(()=>N=!1)),K.$set(r);const a={};4&t&&(a.results=e[2]),W.$set(a);const i={};if(!J&&2&t&&(J=!0,i.value=e[1],k(()=>J=!1)),X.$set(i),Q.ctx=e,4&t&&B!==(B=e[2])&&$(B,Q));else{const n=e.slice();n[6]=Q.resolved,Q.block.p(n,t)}},i(e){z||(S(K.$$.fragment,e),S(W.$$.fragment,e),S(X.$$.fragment,e),S(Q.block),z=!0)},o(e){j(K.$$.fragment,e),j(W.$$.fragment,e),j(X.$$.fragment,e);for(let e=0;e<3;e+=1){const n=Q.blocks[e];j(n)}z=!1},d(e){e&&i(n),e&&i(t),e&&i(f),e&&i(d),A(K),A(W),A(X),Q.block.d(),Q.token=null,Q=null}}}const ci="https://json-schema.org/draft/2019-09/schema",li="https://json-schema.hyperjump.io/schema",ui="solarized-dark";function mi(e,n,t){let r,a,i=`{\n  "$id": "${li}",\n  "$schema": "${ci}"\n}`,s="{}";return Na.setMetaOutputFormat(Na.BASIC),e.$$.update=(()=>{1&e.$$.dirty&&t(2,r=async function(){if(""!==i){Na.add(JSON.parse(i),li,ci);const e=await Na.get(li);return Na.validate(e)}}()),6&e.$$.dirty&&t(3,a=async function(){if(""!==s){let e;try{e=await r}catch(e){}if(e){const n=e(JSON.parse(s),Na.BASIC);if(n.valid)return n;throw n}}}())}),[i,s,r,a,function(e){t(0,i=e)},function(e){t(1,s=e)}]}export default class extends e{constructor(e){super(),n(this,e,mi,oi,t,{})}}
